# If set to db, then use DB table to store gateways,
# useful when your run many gateways on the same server.
gateways_source: db

# Used for:
# - scoping Redis keys
environment: development

# When you display a payment window to a user, he has some time to pay. But what if a
# transaction has been made in the last seconds and Straight didn't have time to detect it?
# This just adds a little bit more time to each expiration period.
# So technically, you can tell your customer he's got 900 seconds to pay, yet wait additional
# 30 seconds (default value) to be able to detect a late transaction
expiration_overtime: 30

# If you have this number of expired addresses in a row,
# the latest one of those will be reused to create a new order.
# This is because wallets that support BIP32 do a limited lookup: they
# only normally check the next 20 next addresses. Thus, the default value.
# Without address reuse, merchants may fall into a situation where they
# technically receive the money, but it's never detected by the wallet.
reuse_address_orders_threshold: 20

# Comment out to disable orders counting.
count_orders: true

# Uncomment this if you want to limit orders creation rate.
# For example, if user's cat makes more than 21 new orders during 60 seconds (from the same IP and Widget),
# any user with this IP will be unable to create more orders via this Widget during those 60 seconds
# Additionally, you can block new orders creation via any Widget from throttled IP for 300 seconds
#throttle:
#  requests_limit: 21
#  period: 60           # in seconds
#  ip_ban_duration: 300 # in seconds

# Path to certificates and private key for BIP70 protocol. Uncomment this and provide
# it to send payment requests to wallets.
ssl_certificate_path: 'bip70.crt'
private_key_path: 'bip70.key'

redis:
  host: localhost
  port: 6379
  #db:       null # change to 1, 2, 3 etc. or leave as is
  #password: null # if no password is needed, leave as is

# These adapters are used to query the blockchain. If the first one fails, the second one is tried and
# so on. The adapters are generally looked up as subclasses of Straight::Blockchain::Adapter
# but you are free to create your own and put a fully qualified class name below. The order is,
# of course, important.
blockchain_adapters:
  Insight:
    mainnet_url:
    #- "https://insight.gear.mycelium.com/api"
    - "https://insight.bitpay.com/api"
    - "https://search.bitaccess.co/insight-api"
    testnet_url:
    #- "https://insight-testnet.gear.mycelium.com/api"
    - "https://test-insight.bitpay.com/api"
    websocket_url:
    #- "wss://insight.gear.mycelium.com"
    - "wss://insight-testnet.gear.mycelium.com"

logmaster:
  log_level: INFO # Wise to change to WARN for production
  file: straight.log
  raise_exception: true
  name: Straight server logger

  # These options bellow send you email whenever a FATAL error occurs.
  # You probably want to uncomment them for production. See https://github.com/snitko/logmaste
  # for various email options.
  #
  #email_config:
    #to: 'me@email.foo'
    #from: "logmaster@yourapp.com"

#db:
#  adapter: sqlite
#  name: straight.db # file is always located in ~/.straight

  # No need to set these options for sqlite,
  # but other DBs may require them.
  #
  #user: username
  #password: password
  #host: hostname
  #port: 1234
